{"version":3,"sources":["src/scenes/sceneBase.ts","src/managers/colorManager.ts","src/objects/player.ts","src/objects/coin.ts","src/objects/board.ts","src/managers/inputManager.ts","src/managers/gameManager.ts","src/scenes/gameScene.ts","src/index.ts"],"names":[],"mappings":"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","file":"src.5ad1bdbf.js","sourceRoot":"..","sourcesContent":["export default class Scene {\n  public context: CanvasRenderingContext2D;\n  public name: string;\n  public active: boolean = false;\n\n  constructor(context: CanvasRenderingContext2D, name: string, active: boolean) {\n    this.context = context;\n    this.name = name;\n    this.active = active;\n  }\n\n  public update(): void{ /* call all update functions that need to be triggered every frame */ }\n  public destroy(): void{ /* deactivate any parallel processes and set all properties to null */ }\n}","export function darken(color: string, amount: number): string {\n  color = (color.indexOf(\"#\")>=0) ? color.substring(1,color.length) : color;\n  amount = Math.floor((255*amount)/100);\n  return `#${subtractLight(color.substring(0,2), amount)}${subtractLight(color.substring(2,4), amount)}${subtractLight(color.substring(4,6), amount)}`;\n}\n\nexport function lighten(color: string, amount: number): string {\n  color = (color.indexOf(\"#\")>=0) ? color.substring(1,color.length) : color;\n  amount = Math.floor((255*amount)/100);\n  return color = `#${addLight(color.substring(0,2), amount)}${addLight(color.substring(2,4), amount)}${addLight(color.substring(4,6), amount)}`;\n}\n\nfunction subtractLight(color: string, amount: number): string {\n  let cc = parseInt(color,16) - amount;\n  let c = (cc < 0) ? 0 : (cc);\n  return (c.toString(16).length > 1 ) ? c.toString(16) : `0${c.toString(16)}`;\n}\n\nfunction addLight(color: string, amount: number): string {\n  let cc = parseInt(color,16) + amount;\n  let c = (cc > 255) ? 255 : (cc);\n  return (c.toString(16).length > 1 ) ? c.toString(16) : `0${c.toString(16)}`;\n}","import PlayerParams from '../dtos/playerParams';\nimport { darken } from '../managers/colorManager';\n\nexport default class Player {\n  private context: CanvasRenderingContext2D;\n  private rotation: number = 0;\n  private inverted: boolean = false;\n  public x: number;\n  public y: number;\n  public size: number;\n  public color: string;\n  public myTurn: boolean = false;\n  public playerNumber: number = 0;\n  public matrixPosition: any[] = [];\n  public previousMatrixPosition: any[] = [];\n\n  constructor(params: PlayerParams) {\n    this.context = params.context;\n    this.x = params.x;\n    this.y = params.y;\n    this.size = params.size;\n    this.color = params.color;\n    this.myTurn = params.myTurn;\n    this.playerNumber = params.playerNumber;\n  }\n\n  public update(): void {\n    this.draw();\n    this.matrixPosition = this.calculatePositionOnMatrix();\n  }\n\n  private draw(): void {\n    this.context.beginPath();\n    switch(this.rotation) {\n      case 0:\n        if (!this.inverted)\n          this.context.rect(this.x, this.y, this.size, this.size);\n        else\n          this.context.rect(this.x + this.size * 2, this.y, this.size, this.size);\n        this.context.rect(this.x + this.size, this.y, this.size, this.size);\n        this.context.rect(this.x + this.size, this.y + this.size, this.size, this.size);\n        this.context.rect(this.x + this.size, this.y + this.size * 2, this.size, this.size);\n        this.context.closePath();\n        break;\n      case 1:\n        if (!this.inverted)\n          this.context.rect(this.x + this.size * 2, this.y, this.size, this.size);\n        else\n          this.context.rect(this.x + this.size * 2, this.y + this.size * 2, this.size, this.size);\n        this.context.rect(this.x + this.size * 2, this.y + this.size, this.size, this.size);\n        this.context.rect(this.x + this.size, this.y + this.size, this.size, this.size);\n        this.context.rect(this.x, this.y + this.size, this.size, this.size);\n        this.context.closePath();\n        break;\n      case 2:\n        if (!this.inverted)\n          this.context.rect(this.x + this.size * 2, this.y + this.size * 2, this.size, this.size);\n        else\n          this.context.rect(this.x, this.y + this.size * 2, this.size, this.size);\n        this.context.rect(this.x + this.size, this.y + this.size * 2, this.size, this.size);\n        this.context.rect(this.x + this.size, this.y + this.size, this.size, this.size);\n        this.context.rect(this.x + this.size, this.y, this.size, this.size);\n        this.context.closePath();\n        break;\n      case 3:\n        if (!this.inverted)\n          this.context.rect(this.x, this.y + this.size * 2, this.size, this.size);\n        else\n          this.context.rect(this.x, this.y, this.size, this.size);\n        this.context.rect(this.x, this.y + this.size, this.size, this.size);\n        this.context.rect(this.x + this.size, this.y + this.size, this.size, this.size);\n        this.context.rect(this.x + this.size * 2, this.y + this.size, this.size, this.size);\n        this.context.closePath();\n        break;\n    }\n\n    if (this.myTurn)\n      this.context.fillStyle = this.color;\n    else\n      this.context.fillStyle = darken(this.color, 10);\n    this.context.fill();\n  }\n\n  private calculatePositionOnMatrix(): any[] {\n    let matrix = [[0,0,0,0],\n                  [0,0,0,0],\n                  [0,0,0,0],\n                  [0,0,0,0],];\n\n    let squareNumber = 0;\n    let emptySpots = [];\n    let height = 3;\n    let width = 2;\n    let placementAdjusterX = 0;\n    let placementAdjusterY = 0;\n\n    switch(this.rotation) {\n      case 0:\n        height = 3;\n        width = 2;\n\n        if (!this.inverted) {\n          emptySpots = [3,5];\n        }\n        else {\n          emptySpots = [4,6];\n          placementAdjusterX = this.size;\n        }\n        break;\n      case 1:\n        height = 2;\n        width = 3;\n\n        if (!this.inverted) {\n          emptySpots = [1,2];\n        }\n        else {\n          emptySpots = [4,5];\n          placementAdjusterY = this.size;\n        }\n        break;\n      case 2:\n        height = 3;\n        width = 2;\n\n        if (!this.inverted) {\n          emptySpots = [2,4];\n          placementAdjusterX = this.size;\n        }\n        else {\n          emptySpots = [1,3];\n        }\n        break;\n      case 3:\n        height = 2;\n        width = 3;\n\n        if (!this.inverted) {\n          emptySpots = [5,6];\n          placementAdjusterY = this.size;\n        }\n        else {\n          emptySpots = [2,3];\n        }\n        break;\n    }\n\n    for(let i = (this.y + placementAdjusterY)/this.size; i<((this.y + placementAdjusterY)/this.size) + height;i++) {\n      for (let j = (this.x + placementAdjusterX)/this.size; j < ((this.x + placementAdjusterX)/this.size) + width; j++) {\n        squareNumber++;\n        if (squareNumber != emptySpots[0] && squareNumber != emptySpots[1]) {\n          if ((i >= 0 && i < matrix.length) && (j >= 0 && j < matrix[0].length))\n            matrix[i][j] = this.playerNumber;\n          else\n            matrix[0][0] = 9;\n        }\n      }\n    }\n\n    let piecesOnBoard = 0;\n    for(let i = 0; i < matrix.length; i++) {\n      for (let j = 0; j < matrix[0].length; j++) {\n        if (matrix[i][j] == this.playerNumber) {\n          piecesOnBoard++;\n        }\n      }\n    }\n    if (piecesOnBoard != 4) {\n      matrix[0][0] = 9;\n    }\n    \n\n    if (this.previousMatrixPosition.length === 0) {\n      this.previousMatrixPosition = matrix.splice(0);\n    } else {\n      if (!this.myTurn) {\n        this.previousMatrixPosition = matrix.splice(0);\n      }\n    }\n\n    if (this.matrixEqual(this.previousMatrixPosition, matrix)) {\n      matrix[0][0] = 8;\n    }\n\n    return matrix;\n  }\n\n  private matrixEqual(a: any[], b: any[]): boolean {\n    if (a === b) return true;\n    if (a == null || b == null) return false;\n    if (a.length != b.length) return false;\n\n    let test = true;\n    for (var i = 0; i < a.length; ++i) {\n      test = this.arraysEqual(a[i], b[i]);\n\n      if (!test) return false;\n    }\n    return true;\n  }\n\n  private arraysEqual(a: any[], b: any[]): boolean {\n    if (a === b) return true;\n    if (a == null || b == null) return false;\n    if (a.length != b.length) return false;\n  \n    for (var i = 0; i < a.length; ++i) {\n      if (a[i] !== b[i]) return false;\n    }\n    return true;\n  }\n\n  public rotate(): void {\n    if (this.rotation < 3)\n      this.rotation++;\n    else\n      this.rotation = 0;\n  }\n\n  public invert(): void {\n    this.inverted = !this.inverted;\n  }\n\n  public moveRight(): void {\n    this.x += this.size;\n  }\n\n  public moveLeft(): void {\n    this.x -= this.size;\n  }\n\n  public moveDown(): void {\n    this.y += this.size;\n  }\n\n  public moveUp(): void {\n    this.y -= this.size;\n  }\n}","import CoinParams from '../dtos/coinParams';\nimport { darken } from '../managers/colorManager';\n\nexport default class Coin {\n  private context: CanvasRenderingContext2D;\n  public x: number;\n  public y: number;\n  public size: number;\n  public color: string;\n  public selected: boolean = false;\n  public active: boolean = false;\n  public coinNumber: number = 0;\n  public matrixPosition: any[] = [];\n\n  constructor(params: CoinParams) {\n    this.context = params.context;\n    this.x = params.x;\n    this.y = params.y;\n    this.size = params.size;\n    this.color = params.color;\n    this.coinNumber = params.coinNumber;\n  }\n\n  public update(): void {\n    this.draw();\n    this.matrixPosition = this.calculatePositionOnMatrix();\n  }\n\n  private draw(): void {\n    this.context.beginPath();\n    this.context.rect(this.x, this.y, this.size, this.size);\n    this.context.closePath();\n\n    if (this.active)\n      this.context.fillStyle = this.color;\n    else\n      this.context.fillStyle = darken(this.color, 10);\n    this.context.fill();\n  }\n\n  private calculatePositionOnMatrix(): any[] {\n    let matrix = [[0,0,0,0],\n                  [0,0,0,0],\n                  [0,0,0,0],\n                  [0,0,0,0],];\n      \n    let y = this.y/this.size;\n    let x = this.x/this.size;\n\n    if ((y >= 0 && y < matrix.length) && (x >= 0 && x < matrix[0].length))\n      matrix[y][x] = this.coinNumber;\n    else\n      matrix[0][0] = 9;\n\n    return matrix;\n  }\n\n  public moveRight(): void {\n    this.x += this.size;\n  }\n\n  public moveLeft(): void {\n    this.x -= this.size;\n  }\n\n  public moveDown(): void {\n    this.y += this.size;\n  }\n\n  public moveUp(): void {\n    this.y -= this.size;\n  }\n}","import BoardParams from '../dtos/boardParams';\n\nexport default class Board {\n  private context: CanvasRenderingContext2D;\n  public x: number;\n  public y: number;\n  public size: number;\n  public color: string;\n\n  constructor(params: BoardParams) {\n    this.context = params.context;\n    this.x = params.x;\n    this.y = params.y;\n    this.size = params.size;\n    this.color = params.color;\n  }\n\n  public update(): void {\n    this.draw();\n  }\n\n  private draw(): void {\n    this.context.beginPath();\n    this.context.rect(this.x, this.y, this.size * 4, this.size * 4);\n    this.context.closePath();\n    this.context.fillStyle = this.color;\n    this.context.fill();\n  }\n}","import Player from '../objects/player';\nimport GameManager from './gameManager';\n\nexport default class InputManager {\n  private gameManager: GameManager;\n  private switch: boolean = false;\n  private destroyed: boolean = false;\n  private gameOver: boolean = false;\n\n  constructor (gameManager: GameManager) {\n    this.gameManager = gameManager;\n\n    document.onkeydown = this.checkInputs.bind(this);\n  }\n\n  private checkInputs(e: any): any {\n    if (!this.destroyed && !this.gameOver) {\n      e = e || window.event;\n\n      if (!this.gameManager.selectingCoin && !this.gameManager.coinRound) {\n        this.gameManager.players.forEach(player => {\n          if (player.myTurn) {\n            if (e.keyCode == '38') {\n              player.moveUp();\n            }\n            else if (e.keyCode == '40') {\n              player.moveDown();\n            }\n            else if (e.keyCode == '37') {\n              player.moveLeft();\n            }\n            else if (e.keyCode == '39') {\n              player.moveRight();\n            }\n            else if (e.keyCode == '32') {\n              player.rotate();\n            }\n            else if (e.keyCode == '17') {\n              player.invert();\n            }\n            else if (e.keyCode == '13') {\n              this.switch = true;\n            }\n          }\n        });\n      } else {\n        if (!this.gameManager.coinRound) {\n          if (e.keyCode == '37') {\n            this.gameManager.changeActiveCoin();\n          }\n          else if (e.keyCode == '39') {\n            this.gameManager.changeActiveCoin();\n          }\n          else if (e.keyCode == '13') {\n            this.switch = true;\n          }\n        } else {\n          this.gameManager.coins.forEach(coin => {\n            if (coin.active) {\n              if (e.keyCode == '38') {\n                coin.moveUp();\n              }\n              else if (e.keyCode == '40') {\n                coin.moveDown();\n              }\n              else if (e.keyCode == '37') {\n                coin.moveLeft();\n              }\n              else if (e.keyCode == '39') {\n                coin.moveRight();\n              }\n              else if (e.keyCode == '13') {\n                this.switch = true;\n              }\n            }\n          });\n        }\n      }\n  \n      if (this.switch) {\n        this.switch = false;\n        this.gameManager.changeGameState();\n      }\n    }\n  }\n\n  public destroy(): void {\n    this.destroyed = true;\n  }\n\n  public setGameOver(): void {\n    this.gameOver = true;\n  }\n}","import Player from '../objects/player';\nimport Coin from '../objects/coin';\nimport InputManager from './inputManager';\nimport Board from '../objects/board';\n\nenum errorCodes {\n  outOfBoard = 9,\n  samePositionAsBefore = 8,\n}\n\nexport default class GameManager {\n  public players: Player[] = [];\n  public coinRound: boolean = false;\n  public selectingCoin: boolean = false;\n  public coins: Coin[] = [];\n  private board: Board;\n  private turnElement: HTMLElement = document.getElementById('turn');\n  private errorsElement: HTMLElement = document.getElementById('errors');\n  private timerElement: HTMLElement = document.getElementById('timer');\n  private errorMessage: string = '';\n  private maxTime: number;\n  private timeLeft: number;\n  private countdownTimer: number;\n  private showingError: boolean = false;\n  private inputManager: InputManager;\n  private boardMatrix: any[] = [[3,1,1,0],\n                                [0,2,1,0],\n                                [0,2,1,0],\n                                [0,2,2,4]];\n\n  constructor (player1: Player, player2: Player,\n    coin1: Coin, coin2: Coin,\n    board: Board, maxTime: number) {\n    this.maxTime = maxTime;\n    this.timeLeft = maxTime;\n    this.timerElement.innerHTML = `${this.maxTime}`;\n\n    this.players.push(player1);\n    this.players.push(player2);\n\n    this.coins.push(coin1);\n    this.coins.push(coin2);\n\n    this.board = board;\n\n    this.turnElement.innerHTML = `Turn: Player ${this.players[0].myTurn?'1' : '2'}`;\n\n    this.inputManager = new InputManager(this);\n\n    this.timerController();\n  }\n\n  private activateCoinSelection(): void {\n    this.selectingCoin = true;\n    this.coins[0].active = true;\n  }\n\n  private activateCoinRound(): void {\n    this.selectingCoin = false;\n    this.coinRound = true;\n  }\n\n  private finishCoinRound(): void {\n    this.coinRound = false;\n    this.coins[0].active = false;\n    this.coins[1].active = false;\n  }\n\n  private switchTurns(): void {\n    this.resetTimer();\n    this.players[0].myTurn = !this.players[0].myTurn;\n    this.players[1].myTurn = !this.players[1].myTurn;\n\n    this.turnElement.innerHTML = `Turn: Player ${this.players[0].myTurn?'1' : '2'}`;\n  }\n\n  private validMove(): boolean {\n    let valid = true;\n\n    if (!this.selectingCoin) {\n      if (!this.coinRound) {\n        this.players.forEach(player => {\n          if (player.myTurn) {\n            if (player.matrixPosition[0][0] === errorCodes.outOfBoard) {\n              valid = false;\n              this.errorMessage = 'Player out of the board!';\n            }\n            else if (player.matrixPosition[0][0] === errorCodes.samePositionAsBefore) {\n              valid = false;\n              this.errorMessage = 'You must move your piece!';\n            }\n            else {\n              for (let i = 0; i < this.boardMatrix.length; i++) {\n                for (let j = 0; j < this.boardMatrix[0].length; j++) {\n                  if (player.matrixPosition[i][j] === player.playerNumber) {\n                    if (this.boardMatrix[i][j] !== 0 && this.boardMatrix[i][j] !== player.playerNumber) {\n                      valid = false; /* overlapping */\n                      this.errorMessage = 'Invalid move!';\n                    }\n                  }\n                }\n              }\n            }\n          }\n        });\n      } else {\n        this.coins.forEach(coin => {\n          if (coin.active) {\n            if (coin.matrixPosition[0][0] === errorCodes.outOfBoard) {\n              valid = false;\n              this.errorMessage = 'Coin is out of the board!';\n            }\n            else {\n              for (let i = 0; i < this.boardMatrix.length; i++) {\n                for (let j = 0; j < this.boardMatrix[0].length; j++) {\n                  if (coin.matrixPosition[i][j] === coin.coinNumber) {\n                    if (this.boardMatrix[i][j] !== 0 && this.boardMatrix[i][j] !== coin.coinNumber) {\n                      valid = false;\n                      this.errorMessage = 'Invalid move!';\n                    }\n                  }\n                }\n              }\n            }\n          }\n        });\n      }\n      console.log('valid move: ' + valid);\n    }\n\n    if (valid) {\n      this.errorMessage = '';\n    }\n    else {\n      this.showError();\n    }\n\n    return valid;\n  }\n\n  private updateBoardMatrix(): void {\n    if (!this.selectingCoin) {\n      if (!this.coinRound) {\n        this.players.forEach(player => {\n          if (player.myTurn) {\n            for (let i = 0; i < this.boardMatrix.length; i++) {\n              for (let j = 0; j < this.boardMatrix[0].length; j++) {\n                if (this.boardMatrix[i][j] === player.playerNumber) {\n                  this.boardMatrix[i][j] = 0;\n                }\n              }\n            }\n      \n            for (let i = 0; i < this.boardMatrix.length; i++) {\n              for (let j = 0; j < this.boardMatrix[0].length; j++) {\n                if (player.matrixPosition[i][j] === player.playerNumber) {\n                  this.boardMatrix[i][j] = player.playerNumber;\n                }\n              }\n            }\n          }\n        });\n        console.log('placed player');\n      } else {\n        this.coins.forEach(coin => {\n          if (coin.active) {\n            for (let i = 0; i < this.boardMatrix.length; i++) {\n              for (let j = 0; j < this.boardMatrix[0].length; j++) {\n                if (this.boardMatrix[i][j] === coin.coinNumber) {\n                  this.boardMatrix[i][j] = 0;\n                }\n              }\n            }\n      \n            for (let i = 0; i < this.boardMatrix.length; i++) {\n              for (let j = 0; j < this.boardMatrix[0].length; j++) {\n                if (coin.matrixPosition[i][j] === coin.coinNumber) {\n                  this.boardMatrix[i][j] = coin.coinNumber;\n                }\n              }\n            }\n          }\n        });\n        console.log('placed coin');\n      }\n      console.log(this.boardMatrix);\n    }\n  }\n\n  private showError(): void {\n    this.errorsElement.innerHTML = this.errorMessage;\n    \n    if (!this.showingError) {\n      this.showingError = true;\n      this.errorsElement.style.opacity = '1';\n      this.errorsElement.classList.add('fade-out');\n\n      setTimeout(() => {\n        this.showingError = false;\n        this.errorsElement.classList.remove('fade-out');\n        this.errorsElement.style.opacity = '0';\n      }, 2000);\n    }\n  }\n\n  private timerController(): void {\n    this.countdownTimer = setInterval(() => {\n      this.timerElement.innerHTML = `${this.timeLeft}`;\n      this.timeLeft -= 1;\n      if(this.timeLeft < 0){\n        this.gameOverNoTime();\n      }\n    }, 1000);\n  }\n\n  private gameOverNoTime(): void {\n    clearInterval(this.countdownTimer);\n    this.turnElement.innerHTML = `WINNER: Player ${this.players[0].myTurn?'2' : '1'}`;\n    this.inputManager.setGameOver();\n  }\n\n  private resetTimer(): void {\n    clearInterval(this.countdownTimer);\n    this.timeLeft = this.maxTime;\n    this.timerController();\n  }\n\n  public deleteTimer(): void {\n    this.timerElement.innerHTML = `${this.maxTime}`;\n    clearInterval(this.countdownTimer);\n  }\n\n  public changeGameState(): void {\n    if (this.validMove()) {\n      this.updateBoardMatrix();\n\n      if (!this.coinRound) {\n        if (!this.selectingCoin) {\n          this.activateCoinSelection();\n        } else {\n          this.activateCoinRound();\n        }\n      } else {\n        this.finishCoinRound();\n        this.switchTurns();\n      }\n    }\n  }\n\n  public changeActiveCoin(): void {\n    this.coins.forEach(coin => {\n      coin.active = !coin.active;\n    });\n  }\n\n  public destroy(): void {\n    this.deleteTimer();\n    this.players = null;\n    this.coinRound = null;\n    this.selectingCoin = null;\n    this.coins = null;\n    this.board = null;\n    this.turnElement = null;\n    this.errorsElement = null;\n    this.timerElement = null;\n    this.errorMessage = null;\n    this.maxTime = null;\n    this.timeLeft = null;\n    this.countdownTimer = null;\n    this.showingError = null;\n    this.inputManager.destroy();\n    this.inputManager = null;\n    this.boardMatrix = null;\n  }\n}","import Scene from './sceneBase';\nimport Player from '../objects/player';\nimport Coin from '../objects/coin';\nimport Board from '../objects/board';\nimport PlayerParams from '../dtos/playerParams';\nimport CoinParams from '../dtos/coinParams';\nimport BoardParams from '../dtos/boardParams';\nimport SceneParams from '../dtos/sceneParams';\nimport GameManager from '../managers/gameManager';\n\nexport default class GameScene extends Scene {\n  private board: Board;\n  private player1: Player;\n  private player2: Player;\n  private coin1: Coin;\n  private coin2: Coin;\n  private slotSize: number = 90;\n  private maxTime: number = 25;\n  private gameManager: GameManager;\n  private destroyed: boolean = false;\n\n  constructor(params: SceneParams) {\n    super(params.context, params.name, params.active);\n\n    this.board = new Board(<BoardParams>{\n      context: this.context,\n      x: 0,\n      y: 0,\n      size: this.slotSize,\n      color: '#bdc3c7',\n    });\n\n    this.player1 = new Player(<PlayerParams>{\n      context: this.context,\n      x: this.slotSize,\n      y: 0,\n      size: this.slotSize,\n      color: '#2ecc71',\n      myTurn: true,\n      playerNumber: 1,\n    });\n\n    this.player2 = new Player(<PlayerParams>{\n      context: this.context,\n      x: this.slotSize,\n      y: this.slotSize,\n      size: this.slotSize,\n      color: '#e74c3c',\n      myTurn: false,\n      playerNumber: 2,\n    });\n    this.player2.rotate();\n    this.player2.rotate();\n    this.player2.moveLeft();\n\n    this.coin1 = new Coin(<CoinParams>{\n      context: this.context,\n      x: 0,\n      y: 0,\n      size: this.slotSize,\n      color: '#f1c40f',\n      coinNumber: 3,\n    });\n\n    this.coin2 = new Coin(<CoinParams>{\n      context: this.context,\n      x: this.slotSize * 3,\n      y: this.slotSize * 3,\n      size: this.slotSize,\n      color: '#f1c40f',\n      coinNumber: 4,\n    });\n\n    this.gameManager = new GameManager(this.player1, this.player2, this.coin1, this.coin2, this.board, this.maxTime);\n  }\n\n  public update(): void {\n    if (!this.destroyed) {\n      this.board.update();\n      this.player1.update();\n      this.player2.update();\n      this.coin1.update();\n      this.coin2.update();\n    }\n  }\n\n  public destroy(): void{\n    this.destroyed = true; \n    this.gameManager.destroy();\n    this.gameManager = null;\n    this.board = null;\n    this.player1 = null;\n    this.player2 = null;\n    this.coin1 = null;\n    this.coin2 = null;\n    this.slotSize = null;\n    this.destroyed = null;\n    this.maxTime = null;\n  }\n}","import Scene from './scenes/sceneBase';\r\nimport GameScene from './scenes/gameScene';\r\nimport SceneParams from './dtos/sceneParams';\r\n\r\nclass Game {\r\n  private readonly context: CanvasRenderingContext2D;\r\n  private canvas: HTMLCanvasElement;\r\n  private playBtn: HTMLElement = document.getElementById('goToGame');\r\n  private exitBtn: HTMLElement = document.getElementById('goToHome');\r\n  private scenes: Scene[] = [];\r\n  private inGame: boolean = false;\r\n\r\n  constructor() {\r\n    this.playBtn.onclick = (() => {\r\n      this.goToGame();\r\n    });\r\n    this.exitBtn.onclick = (() => {\r\n      this.goToHome();\r\n    });\r\n\r\n    this.canvas = <HTMLCanvasElement>document.getElementById('gameCanvas');\r\n    this.context = this.canvas.getContext('2d');\r\n\r\n    window.requestAnimationFrame(() => this.update());\r\n  }\r\n\r\n  private addGameScene(): void {\r\n    this.scenes.push(new GameScene(<SceneParams>{context: this.context, name: 'game', active: true}));\r\n  }\r\n  private removeGameScene(): void {\r\n    this.scenes.forEach((scene, index, object) => {\r\n      if (scene.name === 'game') {\r\n        scene.destroy();\r\n        scene = null;\r\n        object.splice(index, 1);\r\n      }\r\n    });\r\n  }\r\n\r\n  public update(): void {\r\n    this.context.clearRect(0, 0, this.canvas.width, this.canvas.height);\r\n    \r\n    this.scenes.forEach(scene => {\r\n      if (scene.active)\r\n        scene.update();\r\n    });\r\n\r\n    window.requestAnimationFrame(() => this.update());\r\n  }\r\n\r\n  public goToGame(): void {\r\n    document.getElementById('homePage').style.display = 'none';\r\n    document.getElementById('gamePage').style.display = 'block';\r\n    this.addGameScene();\r\n  }\r\n\r\n  public goToHome(): void {\r\n    document.getElementById('gamePage').style.display = 'none';\r\n    document.getElementById('homePage').style.display = 'block';\r\n    this.removeGameScene();\r\n  }\r\n}\r\n\r\nwindow.onload = () => {\r\n  const game = new Game();\r\n};"]}